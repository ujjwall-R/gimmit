services:
  client:
    build:
      context: .
      target: app # Target the client-runtime stage from the Dockerfile
    container_name: next_app
    # When you bind-mount a host directory (in this case ./app:/app), the contents of the host directory (./app) are mirrored into the container's /app directory.
    # However, the node_modules directory inside the container may not be compatible with the operating system or architecture of the host machine.
    # If you bind-mount the entire ./app directory (which contains node_modules on the host), it could overwrite the node_modules directory inside the container, which might lead to errors or mismatches (e.g., architecture-specific dependencies).
    volumes:
      - ./app:/app # Bind-mount the app directory for live updates
      - /app/node_modules # Prevent the node_modules directory from being overwritten
    ports:
      - "3000:3000" # Expose the client app on localhost:3000
    environment:
      - NODE_ENV=development # Set the environment to development
      - WATCHPACK_POLLING=true
    depends_on:
      - server # Ensure the Go Server service starts before the client

  server:
    build:
      context: .
      target: server # Target the server-runtime stage from the Dockerfile
    container_name: go_server
    volumes:
      - ./core-backend:/core-backend # Bind-mount the Go server source code
    ports:
      - "8080:8080" # Expose the server API on localhost:8080
    environment:
      - MONGODB_URI=mongodb://mongo:27017/ # MongoDB connection string
      - MONGODB_DB_NAME=gimmit
      - GO111MODULE=on
      - CGO_ENABLED=1
    depends_on:
      - mongo # Ensure the MongoDB service starts before the server
      - kafka1

  kafka-consumer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kafka-consumer
    environment:
      - PYTHONUNBUFFERED=1
      - MONGODB_URI=mongodb://mongo:27017/ # MongoDB connection string
      - MONGODB_DB_NAME=gimmit
    depends_on:
      - kafka1
      - mongo
      - server

  mongo:
    build:
      context: .
      target: mongodb # Target the MongoDB stage from the Dockerfile
    container_name: mongodb
    ports:
      - "27017:27017" # Expose MongoDB on localhost:27017
    volumes:
      - ./data:/data/db # Persist MongoDB data locally

  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      # KAFKA_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://0.0.0.0:9092
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zoo1
